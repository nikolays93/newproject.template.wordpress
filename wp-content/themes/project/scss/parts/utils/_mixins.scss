//  strip units helper function
@function num($input) {
    @return $input/($input * 0 + 1);
}

$media-hd:  1440px !default;
$media-fhd: 1560px !default;

//
// Media Quires
//
@mixin from($min_width) {
    @media screen and (min-width: $min_width) {
        @content;
    }
}

@mixin to($max_width) {
    @media screen and (max-width: $max_width) {
        @content;
    }
}

@mixin from-to($min_width, $max_width) {
    @media screen and (min-width: $min_width) and (max-width: $max_width) {
        @content;
    }
}

@mixin font-sm( $size ) {
    @include to( $media-sm ) {
        font-size: $size * 1px;
        font-size: num($size) * $wsm;
    }
}

@mixin font-xl( $size ) {
    @include from( $media-xl + 1 ) {
        font-size: $size * 1px;
        font-size: num($size) * $wfhd;
    }
}

$tpl-sm: 320px;
$tpl-fhd: 1920px;

$wsm:  (1 / (num($tpl-sm)  * 0.01)) * 1vw;
$wmd:  (1 / (num($media-md)  * 0.01)) * 1vw;
$wlg:  (1 / (num($media-lg)  * 0.01)) * 1vw;
$wxl:  (1 / (num($media-xl)  * 0.01)) * 1vw;
$whd:  (1 / (num($media-hd)  * 0.01)) * 1vw;
$wfhd: (1 / (num($tpl-fhd) * 0.01)) * 1vw;

@mixin vw( $context, $value, $value-lg: $value, $value-sm: $value, $value-fhd: 0 ) {

    @include from( $media-xl + 1 ) {
        #{$context}: $value * $wfhd;
    }

    @if 0 != $value-fhd {
        @include from( $media-fhd + 1 ) {
            #{$context}: $value-fhd * $wfhd;
        }
    }

    @include to( $media-xl ) {
        #{$context}: $value-lg * $wxl;
    }

    @include to( $media-lg ) {
        #{$context}: $value-lg * $wlg;
    }

    @include to( $media-sm ) {
        #{$context}: $value-sm * $wsm;
    }
}

@mixin vw-sm( $context, $value ) {
    @include to( $media-sm ) {
        #{$context}: $value * $wsm;
    }
}

//
// Positions
//
// Define vertical, horizontal, or both ABSOLUTE* position
// * Must be in absolute or relative parent
//
@mixin absolute-center($position: both) {
    position: absolute;

    @if $position == 'vertical' {
        top: 50%;
        transform: translateY(-50%);
    }
    @else if $position == 'horizontal' {
        left: 50%;
        transform: translate(-50%);
    }
    @else if $position == 'both' {
        top: 50%;
        left: 50%;
        transform: translate(-50%, -50%);
    }
}

//
// Blocks
//
@mixin columns( $count: 2 ) {
    column-count: $count;

    > div, li {
        display: inline-block;
        position: relative;
        width: 100%;
    }
}

@mixin two-columns($direct: horizontal, $min-media: $media-xl) {
    @media screen and (min-width: $min-media) {
        @if $direct == vertical {
            @include columns(2);
        }
        @else {
            position: relative;
            overflow: hidden;

            > div, li {
                float: left;
                width: 49%;

                &:nth-child(2n+1) {
                    clear: both;
                }
                &:nth-child(2n+2) {
                    float: right;
                }
            }
        }
    }
}

//
// Images
//
$retina: "only screen and (-webkit-min-device-pixel-ratio: 2), only screen and (min--moz-device-pixel-ratio: 2), only screen and (-o-min-device-pixel-ratio: 2/1), only screen and (min-device-pixel-ratio: 2), only screen and (min-resolution: 192dpi), only screen and (min-resolution: 2dppx)";
@mixin retina-background-image($file, $type, $width, $height) {
    background-image: url($file + '.' + $type);
    @media #{$retina} {
        background-image: url($file + '@2x.' + $type);
        background-size: $width $height;
    }
}

@mixin scale($max-width: 100%, $max-width-hover: 120%, $transition: .25s ease) {
    & {
        > img {
            max-width: $max-width;
            width: 999%;
            transition: $transition max-width;

            &:hover {
                max-width: $max-width-hover;
            }
        }
    }

    .touch & {
        > img {
            max-width: $max-width-hover;
        }
    }
}

@mixin thumbnail-center($width, $height) {
    & {
        position: relative;

        @if $width {
            width: $width;
        }

        @if $height {
            height: $height;
        }
    }

    > img {
        display: block;
        width: 100%;
        @include absolute-center();
    }
}

@mixin rounded($deg) {
    border-radius: $deg;
}

@mixin circle() {
    overflow: hidden;
    border-radius: 50%;

    img {
        clip-path: circle(50% at 50% 50%);
    }
}
